mutate(stdWeight = (Weight - mean(Weight)) / sd(Weight)) %>%
ungroup()
# Plot again with the standardised weight
ggplot(RATSL, aes(x = Time, y = stdWeight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "standardized weight")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of weight by group and time
RATSL <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
RATSL <- read.table("data/ratsl.csv", sep = ";", header = TRUE)
RATSL$ID <- factor(RATSL$ID)
RATSL$Group <- factor(RATSL$Group)
str(RATSL)
library(ggplot2)
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
# Standardise the variable weight
RATSL <- RATSL %>%
group_by(Time) %>%
mutate(stdWeight = (Weight - mean(Weight)) / sd(Weight)) %>%
ungroup()
# Plot again with the standardised weight
ggplot(RATSL, aes(x = Time, y = stdWeight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "standardized weight")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of weight by group and time
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2,3)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8,0.8)) +
scale_y_continuous(name = "mean(weight) +/- se(weight)")
# Create a summary data by group and id with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
filter(Time > 0) %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
View(RATSL8S)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(BPRSL8S, Group == "1", mean < 100)
# Create a summary data by group and id with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
filter(Time > 0) %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(BPRSL8S, Group == "1", mean < 100)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S, Group == "1", mean < 100)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S, Group == "1", mean > 100)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S, Group == "1" && mean > 100)
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S, Group == "1" && mean > 240)
View(BPRSL8S1_G1)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S, mean > 240)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S, Group == "1" & mean > 240)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
# BPRSL8S1 <- filter(BPRSL8S, mean < 70)
BPRSL8S1_G1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Draw a boxplot of the mean versus group
ggplot(RATSL8S_G1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
BPRSL8S1_G1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S_G1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S_G1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S_G1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a summary data by group and id with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
filter(Time > 0) %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S_G1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S_G1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Perform a two-sample t-test
t.test(mean ~ group, data = RATSL8S1, var.equal = TRUE)
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Perform a two-sample t-test
t.test(mean ~ group, data = RATSL8S1, var.equal = TRUE)
# Perform a two-sample t-test
t.test(mean ~ Group, data = RATSL8S1, var.equal = TRUE)
# Perform a two-sample t-test
t.test(mean ~ Group[1:2], data = RATSL8S1, var.equal = TRUE)
# Perform a two-sample t-test
Group12 <- filter(RATSL8S1, Group == "1" | Group == "2")
t.test(mean ~ Group, data = Group12, var.equal = TRUE)
BPRSL <- read.table("data/BPRSL.csv", sep = ";", header = TRUE)
BPRSL$treatment <- factor(BPRSL$treatment)
BPRSL$subject <- factor(BPRSL$subject)
str(BPRSL)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Week", breaks = seq(0, 60, 10)) +
scale_y_continuous(name = "BPRS") +
theme(legend.position = "top")
View(BPRSL)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Week", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "BPRS") +
theme(legend.position = "top")
# create a regression model RATS_reg
BPRS_reg <- lm(bprs ~ week + treatment, data = BPRSL)
# print out a summary of the model
summary(BPRS_reg)
# access library lme4
library(lme4)
# Create a random intercept model
BPRS_ref <- lmer(bprs ~ week + treatment + (1 | subject), data = BPRSL, REML = FALSE)
# Print the summary of the model
summary(BPRS_ref)
# access library lme4
library(lme4)
# Create a random intercept model
BPRS_ref <- lmer(bprs ~ week + treatment + (1 | subject), data = BPRSL, REML = FALSE)
# Print the summary of the model
summary(BPRS_ref)
# create a random intercept and random slope model
RATS_ref1 <- lmer(Weight ~ Time + Group + (Time | ID), data = RATSL, REML = FALSE)
# print a summary of the model
summary(RATS_ref1)
# perform an ANOVA test on the two models
anova(RATS_ref1, RATS_ref)
# create a random intercept and random slope model
BPRS_ref1 <- lmer(bprs ~ week + treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref1)
# perform an ANOVA test on the two models
anova(BPRS_ref1, BPRS_ref)
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + (week | treatment), data = BPRSL, REML = FALSE)
# print a summary of the model
# summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = ID)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + (week | treatment), data = BPRSL, REML = FALSE)
# print a summary of the model
# summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref2)
# Create a new column fitted to BPRSL
BPRSL$Fitted <- Fitted
# draw the plot of BPRSL with the Fitted values of bprs
ggplot(BPRSL, aes(x = week, y = Fitted, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Fitted bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
RATSL <- read.table("data/ratsl.csv", sep = ";", header = TRUE)
RATSL$ID <- factor(RATSL$ID)
RATSL$Group <- factor(RATSL$Group)
str(RATSL)
library(ggplot2)
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
# Standardise the variable weight
RATSL <- RATSL %>%
group_by(Time) %>%
mutate(stdWeight = (Weight - mean(Weight)) / sd(Weight)) %>%
ungroup()
# Plot again with the standardised weight
ggplot(RATSL, aes(x = Time, y = stdWeight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "standardized weight")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of weight by group and time
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2,3)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8,0.8)) +
scale_y_continuous(name = "mean(weight) +/- se(weight)")
# Create a summary data by group and id with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
filter(Time > 0) %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Perform a two-sample t-test
Group12 <- filter(RATSL8S1, Group == "1" | Group == "2")
t.test(mean ~ Group, data = Group12, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
BPRSL8S2 <- BPRSL8S %>%
mutate(baseline = BPRS$week0)
# Perform a two-sample t-test
Group12 <- filter(RATSL8S1, Group == "1" | Group == "2")
t.test(mean ~ Group, data = Group12, var.equal = TRUE)
# Add the baseline from the original data as a new variable to the summary data
RATSL8S2 <- RATSL8S %>%
mutate(baseline = BPRS$week0)
RATSL <- read.table("data/ratsl.csv", sep = ";", header = TRUE)
RATSL$ID <- factor(RATSL$ID)
RATSL$Group <- factor(RATSL$Group)
str(RATSL)
library(ggplot2)
ggplot(RATSL, aes(x = Time, y = Weight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(min(RATSL$Weight), max(RATSL$Weight)))
# Standardise the variable weight
RATSL <- RATSL %>%
group_by(Time) %>%
mutate(stdWeight = (Weight - mean(Weight)) / sd(Weight)) %>%
ungroup()
# Plot again with the standardised weight
ggplot(RATSL, aes(x = Time, y = stdWeight, linetype = ID)) +
geom_line() +
scale_linetype_manual(values = rep(1:10, times=4)) +
facet_grid(. ~ Group, labeller = label_both) +
scale_y_continuous(name = "standardized weight")
# Number of weeks, baseline (week 0) included
n <- RATSL$Time %>% unique() %>% length()
# Summary data with mean and standard error of weight by group and time
RATSS <- RATSL %>%
group_by(Group, Time) %>%
summarise( mean = mean(Weight), se = sd(Weight)/sqrt(n) ) %>%
ungroup()
# Plot the mean profiles
ggplot(RATSS, aes(x = Time, y = mean, linetype = Group, shape = Group)) +
geom_line() +
scale_linetype_manual(values = c(1,2,3)) +
geom_point(size=3) +
scale_shape_manual(values = c(1,2,3)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se, linetype="1"), width=0.3) +
theme(legend.position = c(0.8,0.8,0.8)) +
scale_y_continuous(name = "mean(weight) +/- se(weight)")
# Create a summary data by group and id with mean as the summary variable (ignoring baseline week 0).
RATSL8S <- RATSL %>%
filter(Time > 0) %>%
group_by(Group, ID) %>%
summarise( mean=mean(Weight) ) %>%
ungroup()
# Draw a boxplot of the mean versus group
ggplot(RATSL8S, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
# Create a new data by filtering the outlier and adjust the ggplot code the draw the plot again with the new data
RATSL8S1 <- filter(RATSL8S,
(Group == "1" & mean > 240) |
(Group == "2" & mean < 590) |
(Group == "3" & mean > 500))
# Draw a boxplot of the mean versus group
ggplot(RATSL8S1, aes(x = Group, y = mean)) +
geom_boxplot() +
stat_summary(fun.y = "mean", geom = "point", shape=23, size=4, fill = "white") +
scale_y_continuous(name = "mean(weight), weeks 1-9")
BPRSL <- read.table("data/BPRSL.csv", sep = ";", header = TRUE)
BPRSL$treatment <- factor(BPRSL$treatment)
BPRSL$subject <- factor(BPRSL$subject)
str(BPRSL)
library(ggplot2)
library(dplyr)
library(tidyr)
ggplot(BPRSL, aes(x = week, y = bprs, group = treatment)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Week", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "BPRS") +
theme(legend.position = "top")
# create a regression model BPRS_reg
BPRS_reg <- lm(bprs ~ week + treatment, data = BPRSL)
# print out a summary of the model
summary(BPRS_reg)
# access library lme4
library(lme4)
# Create a random intercept model
BPRS_ref <- lmer(bprs ~ week + treatment + (1 | subject), data = BPRSL, REML = FALSE)
# Print the summary of the model
summary(BPRS_ref)
# create a random intercept and random slope model
BPRS_ref1 <- lmer(bprs ~ week + treatment + (week | subject), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref1)
# perform an ANOVA test on the two models
anova(BPRS_ref1, BPRS_ref)
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + (week | treatment), data = BPRSL, REML = FALSE)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = Group)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, linetype = treatment, group = subject)) +
# geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)", breaks = seq(0, 8, 1)) +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
# geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)") +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + (week | treatment), data = BPRSL, REML = FALSE)
# print a summary of the model
# summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)") +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_line(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)") +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + (week | treatment), data = BPRSL, REML = FALSE)
# print a summary of the model
# summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_step(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)") +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# draw the plot of BPRSL with the observed bprs values
ggplot(BPRSL, aes(x = week, y = bprs, group = subject)) +
geom_step(aes(linetype = treatment)) +
scale_x_continuous(name = "Time (week)") +
scale_y_continuous(name = "Observed bprs") +
theme(legend.position = "top")
# create a random intercept and random slope model with the interaction
BPRS_ref2 <- lmer(bprs ~ week + treatment + (week | treatment), data = BPRSL, REML = FALSE)
# print a summary of the model
summary(BPRS_ref2)
# perform an ANOVA test on the two models
anova(BPRS_ref2, BPRS_ref1)
# Create a vector of the fitted values
Fitted <- fitted(BPRS_ref2)
# Create a new column fitted to BPRSL
BPRSL$Fitted <- Fitted
