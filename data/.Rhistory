setwd("~/Workspace/hy/open-data-science/IODS-project")
getOption("repos")
math <- read.table("student-mat.csv", sep = ";" , header=TRUE)
por <- read.table("student-por.csv", sep = ";", header = TRUE)
setwd("~/Workspace/hy/open-data-science/IODS-project/data")
math <- read.table("student-mat.csv", sep = ";" , header=TRUE)
por <- read.table("student-por.csv", sep = ";", header = TRUE)
dim(math)
dim(por)
str(math)
str(por)
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
join_by <- c(
"school","sex","age","address","famsize","Pstatus","Medu",
"Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
dim(math_por)
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
# 2.
library(dplyr)
join_by <- c(
"school","sex","age","address","famsize","Pstatus","Medu",
"Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
dim(math_por)
str(math_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
print(notjoined_columns)
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# 6. Take the average of the answers related to weekday and weekend alcohol
# consumption to create a new column 'alc_use' to the joined data
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
# Use 'alc_use' to create a new logical column 'high_use' which is TRUE
# for students for which 'alc_use' is greater than 2 (and FALSE otherwise)
alc <- mutate(alc, high_use = alc_use > 2)
# 6. Take the average of the answers related to weekday and weekend alcohol
# consumption to create a new column 'alc_use' to the joined data
alc <- mutate(alc, alc_use = (alc$Dalc + alc$Walc) / 2)
# Use 'alc_use' to create a new logical column 'high_use' which is TRUE
# for students for which 'alc_use' is greater than 2 (and FALSE otherwise)
alc <- mutate(alc, high_use = alc$alc_use > 2)
# Use 'alc_use' to create a new logical column 'high_use' which is TRUE
# for students for which 'alc_use' is greater than 2 (and FALSE otherwise)
alc <- mutate(alc, high_use = alc$alc_use > 2)
# 7. Glimpse and check the data
glimpse(alc)
write.table(alc, file = "alc.csv", sep = ";")
alc_again <- read.table("alc.csv", sep = ";", header = TRUE)
head(alc_again)
str(alc_again)
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("data/alc.csv", sep = ";", header = TRUE)
dim(alc)
str(alc)
summary(alc)
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(tidyr); library(dplyr); library(ggplot2)
install.packages("tidyr")
library(tidyr); library(dplyr); library(ggplot2)
gather(alc) %>% glimpse
gather(alc) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar()
library(GGally)
library(ggplot2)
ggpairs(alc, mapping = aes(col=sex, alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
```{r}
library(ggplot2)
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences, col = sex))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
# initialize a plot of high_use and G3
g1 <- ggplot(alc, aes(x = high_use, y = G3))
# define the plot as a boxplot and draw it
g1 + geom_boxplot() + ylab("grade")
# initialise a plot of high_use and absences
g2 <- ggplot(alc, aes(x = high_use, y = absences))
# define the plot as a boxplot and draw it
g2 + geom_boxplot() + ggtitle("Student absences by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use, y = health))
g3 + geom_boxplot()
g3 <- ggplot(alc, aes(x = high_use, y = goout))
g3 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = Pstatus))
g4 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = n(Pstatus)))
g4 + geom_boxplot()
alc %>% group_by(high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(high_use, Pstatus) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g4 <- ggplot(alc, aes(x = high_use, y = studytime))
g4 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = failures))
g4 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = studytime))
g4 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = romantic))
g4 + geom_boxplot()
alc %>% group_by(romantic, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
g4 <- ggplot(alc, aes(x = high_use, y = famrel))
g4 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = freetime))
g4 + geom_boxplot()
g4 <- ggplot(alc, aes(x = high_use, y = studytime))
g4 + geom_boxplot()
styler:::style_active_file()
g1 + geom_boxplot() + xlab("High use") + ylab("Final grade")
library(ggplot2)
```{r}
library(ggplot2)
g1 <- ggplot(alc, aes(x = high_use, y = G3))
g1 + geom_boxplot() + xlab("High use") + ylab("Final grade")
g2 <- ggplot(alc, aes(x = high_use, y = absences))
g2 + geom_boxplot() + xlab("High use") + ylab("Absences")
g3 <- ggplot(alc, aes(x = high_use, y = goout))
g3 + geom_boxplot() + xlab("High use") + ylab("Going out with friends")
g4 <- ggplot(alc, aes(x = high_use, y = studytime))
g4 + geom_boxplot() + xlab("High use") + ylab("Weekly study time")
library("dplyr")
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_absences = mean(absences))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_go_out = mean(goout))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_study_time = mean(studytime))
library("dplyr")
alc %>% group_by(high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_absences = mean(absences))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_go_out = mean(goout))
alc %>% group_by(high_use) %>% summarise(count = n(), mean_study_time = mean(studytime))
summary(alc)
library(ggplot2)
g1 <- ggplot(alc, aes(x = high_use, y = G3))
g1 + geom_boxplot() + xlab("High alcohol use") + ylab("Final grade")
g2 <- ggplot(alc, aes(x = high_use, y = absences))
g2 + geom_boxplot() + xlab("High alcohol use") + ylab("Absences")
g3 <- ggplot(alc, aes(x = high_use, y = studytime))
g3 + geom_boxplot() + xlab("High alcohol use") + ylab("Weekly study time")
g4 <- ggplot(alc, aes(x = high_use, y = goout))
g4 + geom_boxplot() + xlab("High alcohol use") + ylab("Going out with friends")
m <- glm(high_use ~ G3 + absences + studytime + goout, data = alc, family = "binomial")
summary(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
g1 <- ggplot(alc, aes(x = high_use, y = sex))
g1 + geom_boxplot() + xlab("High alcohol use") + ylab("Final grade")
alc %>% group_by(sex, high_use) %>% summarise(count = n(), mean_grade = mean(G3))
alc %>% group_by(high_use) %>% summarise(count = n())
alc %>% group_by(high_use, sex) %>% summarise(count = n())
library(ggplot2)
g1 <- ggplot(alc, aes(x = high_use, y = G3))
g1 + geom_boxplot() + xlab("High alcohol use") + ylab("Final grade")
g2 <- ggplot(alc, aes(x = high_use, y = absences))
g2 + geom_boxplot() + xlab("High alcohol use") + ylab("Absences")
g3 <- ggplot(alc, aes(x = high_use, y = studytime))
g3 + geom_boxplot() + xlab("High alcohol use") + ylab("Weekly study time")
g4 <- ggplot(alc, aes(x = high_use, y = goout))
g4 + geom_boxplot() + xlab("High alcohol use") + ylab("Going out with friends")
g1 <- ggplot(alc, aes(x = high_use, y = failures))
g1 + geom_boxplot() + xlab("High alcohol use") + ylab("Final grade")
# fit the model
m <- glm(high_use ~ absences + studytime + goout, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, sex, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
g <- ggplot(alc, aes(x = probability, y = high_use, col = prediction))
# define the geom as points and draw the plot
g + geom_point()
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
# define a loss function (mean prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
m <- glm(high_use ~ G3 + absences + studytime + goout, data = alc, family = "binomial")
summary(m)
m <- glm(high_use ~ G3 + absences + studytime + goout, data = alc, family = "binomial")
summary(m)
m <- glm(high_use ~ absences + studytime + goout, data = alc, family = "binomial")
summary(m)
# compute odds ratios (OR)
OR <- coef(m) %>% exp
# compute confidence intervals (CI)
CI <- confint(m) %>% exp
# print out the odds ratios with their confidence intervals
cbind(OR, CI)
# fit the model
m <- glm(high_use ~ absences + studytime + goout, data = alc, family = "binomial")
# predict() the probability of high_use
probabilities <- predict(m, type = "response")
# add the predicted probabilities to 'alc'
alc <- mutate(alc, probability = probabilities)
# use the probabilities to make a prediction of high_use
alc <- mutate(alc, prediction = probability > 0.5)
# see the last ten original classes, predicted probabilities, and class predictions
select(alc, failures, absences, sex, high_use, probability, prediction) %>% tail(10)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
# define a loss function (mean prediction error)
loss_func <- function(class, prob) {
n_wrong <- abs(class - prob) > 0.5
mean(n_wrong)
}
# call loss_func to compute the average number of wrong predictions in the (training) data
loss_func(class = alc$high_use, prob = alc$probability)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction)
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
# tabulate the target variable versus the predictions
table(high_use = alc$high_use, prediction = alc$prediction) %>% prop.table() %>% addmargins()
